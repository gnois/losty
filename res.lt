var is = require('losty.is')
var tbl = require('losty.tbl')
var str = require('losty.str')

-- Create response
------------------

var header = ->
	-- underscore to dash and capitalize word
	-- t.foo_bar becomes t['Foo-Bar']
	var normalize = \txt ->
		return string.gsub(txt, "_", "-").lower(@).gsub(@, "^%l", string.upper).gsub(@, "-%l", string.upper)
	
	var headers = {}
	return {
		set = ->
			for k, v in pairs(headers)
				ngx.header[k] = v
			
		, new = ->
			return setmetatable({
				delete = \name ->
					headers[name] = nil
			}, { 
				__metatable = false
				, __index = \_, k ->
					var key = normalize(k)
					return headers[key]
				, __newindex = \_, k, v ->
					var key = normalize(k)
					-- add as value object, not comma concatenating, so we know if duplicate header are set
					tbl.add(headers, key, v)
			})
	}


-- see http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/ section 'Cookie maintenance and lifecycle'
--   we only identify cookie by name, no subcookie (a=b&c=d&h=k), 
--   and there cannot be 2 cookie of the same name with different domain/path/secure/httponly/expiry, which is actually valid in RFC
var cookie = ->
	var escape = ngx.escape_uri
	var insert = table.insert
	var concat = table.concat

	var cookies = {}
	var metas = {}

	return {
		set = \secure  ->
			for k, m in pairs(metas)
				var val = cookies[k] or ''
				if m.encode
					val = m.encode(val)
				else
					val = tostring(val)
				var age = tonumber(m.age)
				var expires 
				if age ~= 0
					expires = ngx.cookie_time(ngx.time() + age) or nil
				-- no zero or -ve max age
				if age <= 0
					age = nil
				
				var txt = { k, '=' }
				insert(txt, escape(val))
				if expires 
					insert(txt, "; Expires=" .. expires)
				if age 
					insert(txt, "; Max-Age=" .. age)
				if m.domain 
					insert(txt, "; Domain=" .. m.domain)
				if m.path
					insert(txt, "; Path=" .. m.path)
				if m.httponly 
					insert(txt, "; HttpOnly")
				if secure
					insert(txt, "; Secure")
				tbl.add(ngx.header, 'Set-Cookie', concat(txt))
			
		, new = ->
			return setmetatable({
				create = \name, age, httponly, domain, path, encode ->
					-- cookies[name].__tostring cannot be encode(), 
					--  coz metamethods only exist for table, yet value can be string, number or nil
					--  hence metas is needed
					metas[name] = { age = age, httponly = httponly, domain = domain, path = path, encode = encode }
					cookies[name] = {}
					return cookies[name]

				-- to delete successfully, httponly, domain and path must match create()
				, delete = \name, httponly, domain, path ->
					metas[name] = { age = -24*3600, httponly = httponly, domain = domain, path = path }
					cookies[name] = 'null'
			}, {
				__metatable = false
				, __index = \_, name ->
					return cookies[name]
				, __newindex = \_, name, val ->
					if not metas[name]
						error("call create('" .. name .. "', ...) before using response cookie")
					cookies[name] = val
			})
	}


return ->
	var headers = header()
	var cookies = cookie()
	
	var res = {
		status = nil
		, body = nil
		, headers = headers.new()
		, cookies = cookies.new()
	}
	
	--`` utilities ``

	-- simple template generation with {}
	res.render = \template, data ->
		-- extra parenthesis needed coz string.gsub has multiple returns
		res.body = (string.gsub(template, "{([_%w%.]*)}", \s ->
			var keys = str.split(s, "%.")
			var v = data[keys[1]]
			for i = 2, #keys
				v = v[keys[i]]
			return v or '{'.. s ..'}'
		))

	-- no caching
	res.nocache = ->
		res.headers["Cache-Control"] = "no-cache"   -- no-store ? github.com does not have max-age=0, s-maxage=0, must-revalidate, proxy-revalidate
		
	-- caching headers (in seconds)
	res.cache = \sec ->
		-- should check if status equals 200, 201, 204, 206, 301, 302, 303, 304, or 307
		-- http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires
		res.headers["Cache-Control"] = "max-age=" .. sec     -- 'public' by default
		-- http://www.freshblurbs.com/blog/2015/12/12/http-cache-restful-apis.html
		-- res.headers["Expires"] = ngx.http_time(ngx.time() + sec)
		
	--``
	See 
	https://en.wikipedia.org/wiki/HTTP_302, first paragraph
	https://en.wikipedia.org/wiki/HTTP_303
	http://stackoverflow.com/questions/5129076/after-a-post-should-i-do-a-302-or-a-303-redirect
	
	res.redirect = \url, permanent ->
		if permanent
			res.status = ngx.HTTP_MOVED_PERMANENTLY
		else
			res.status = ngx.HTTP_MOVED_TEMPORARILY
		res.headers['Location'] = url
	--``
	res.redirect = \url, same_method ->
		if same_method
			res.status = 307  -- if request method is POST, use POST again to get the new resource
		else
			res.status = ngx.HTTP_SEE_OTHER  -- always use GET to get the new resource
		res.headers['Location'] = url

	var set = \status, body ->
		res.status = status
		res.body = body

	res.ok = \body ->
		set(ngx.HTTP_OK, body)
		
	res.notfound = \body ->
		set(ngx.HTTP_NOT_FOUND, body or "Resource not found")

	res.crashed = \body ->
		set(ngx.HTTP_INTERNAL_SERVER_ERROR, body or "Internal server error")

	return {
		send_headers = \secure ->
			-- event-stream can have no status
			if res.status
				ngx.status = res.status
			headers.set()
			cookies.set(secure)
			ngx.send_headers()
			

		, send_body = ->
			if is.func(res.body)
				var co = coroutine.create(res.body)
				do
					var ok, val = coroutine.resume(co)
					if ok and val
						ngx.print(val)
						ngx.flush(true)
				until not ok
			else
				ngx.print(res.body)

		, eof = ->
			ngx.eof()
			
		, create = ->
			return res
	}


--``
 predefined status

ngx.HTTP_OK (200)
ngx.HTTP_CREATED (201)
ngx.HTTP_SPECIAL_RESPONSE (300)
ngx.HTTP_MOVED_PERMANENTLY (301)
ngx.HTTP_MOVED_TEMPORARILY (302)
ngx.HTTP_SEE_OTHER (303)
ngx.HTTP_NOT_MODIFIED (304)
ngx.HTTP_BAD_REQUEST (400)
ngx.HTTP_UNAUTHORIZED (401)
ngx.HTTP_FORBIDDEN (403)
ngx.HTTP_NOT_FOUND (404)
ngx.HTTP_NOT_ALLOWED (405)
ngx.HTTP_GONE (410)
ngx.HTTP_INTERNAL_SERVER_ERROR (500)
ngx.HTTP_METHOD_NOT_IMPLEMENTED (501)
ngx.HTTP_SERVICE_UNAVAILABLE (503)
ngx.HTTP_GATEWAY_TIMEOUT (504)
--``