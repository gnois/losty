var pgmoon = require('pgmoon')
var parrays = require('pgmoon.arrays')
var pjson = require('pgmoon.json')
var phstore = require('pgmoon.hstore')
var sql = require('losty.sql.base')

-- Remember to call setup_hstore() 

return \database, user, password, host, port, pool ->
	
	var db = pgmoon.new({database = database, user = user, password = password, host = host, port = port, pool = pool})
	-- use ngx.null instead of nil
	db.convert_null = true
	db.NULL = ngx.null
	
	-- To list all pgsql operators
	-- psql 
	-- \do ?
	-- \do ??
	-- \do ???
	-- why not named parameter :var: inside query ? coz Luaty can no longer check use of undeclared variable
	
	-- Only nil, boolean, number, string and table acceptable as arguments for placeholder
	var interpolate = \query, ... ->
		var args = {...}
		var i = 0
		return (string.gsub(query, "(:?):([a-z%?])", \c, x ->
			-- if using [^:] instead of (:?), we will miss :? at the beginning of a line
			if c == ':'  -- return verbatim
				return '::' .. x

			i = i + 1
			var a = args[i]
			if a and a ~= ngx.null
				var ty = type(a)
				if 'table' == ty
					if x == 'a'
						return parrays.encode_array(a)
					else if x == 'h'
						return phstore.encode_hstore(a)
					else if x ~= '?'
						ngx.log(ngx.ERR, "Invalid query placeholder `:", x, "` for table value at position ", i)
					return pjson.encode_json(a)
				
				else if 'number' == ty or 'string' == ty or 'boolean' == ty
					if x == 'b'
						return db.encode_bytea(@, a)
					else if x ~= '?'
						ngx.log(ngx.ERR, "Invalid query placeholder `:", x, "` for scalar value at position ", i)
					return db.escape_literal(@, a)

			return "NULL"
		)), i

	var run = \str, ... ->
		var n = select("#", ...)
		var q, i = interpolate(str, ...)
		if n ~= i
			ngx.log(ngx.ERR, "Trying to match ", i ," placeholders to ", n ," arguments for query `", str, "`")
		var result, err, partial, count = db.query(@, q)
		print(q)
		-- result is true on success if no query result, nil if failed
		if result == nil and err
			ngx.log(ngx.ERR, err)
		-- err can be count
		return result, err, partial, count

	var keepalive = \timeout ->
		db.keepalive(@, timeout)
		
	var K = sql(db, run, keepalive)

	K.hstore = ->
		db.setup_hstore(@)

	-- must only connect() inside a function, not at top level
	-- else Error: cannot yield across C-call boundary
	K.connect = ->
		assert(db.connect(@))
		--db.query(@, "SET TIME ZONE 'UTC';")

	-- closes the connection, vs K.disconnect() which keepalive the connection and rollback uncommitted transaction
	K.close = ->
		db.disconnect(@)
		
	-- if read timed out, pgmoon closes the socket for us
	-- no need to wrap in xpcall()
	K.listen = ->
		return db.wait_for_notification(@)
	
	K.subscribe = \channel ->
		return db.query(@, 'LISTEN ' .. channel)
	
	K.unsubscribe = \channel ->
		return db.query(@, 'UNLISTEN ' .. channel)
		

	return K

