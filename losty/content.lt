var json = require('cjson')
var sha1 = require('resty.sha1')
var str = require('resty.string')
var strz = require('losty.str')
var body = require('losty.body')
var choose = require('losty.accept')
var dispatch = require('losty.dispatch')

var HTML = "text/html"
var JSON = "application/json"

var reject = \req, res ->
	res.status = 406
	-- web.run() already provides desc for status >= 400
	--res.headers['Content-Type'] = "text/plain"
	--res.body = 'Not acceptable'

-- Once a route respond differently based on HTTP Accept header, shd set Vary: Accept for all responses
-- See https://www.fastly.com/blog/best-practices-for-using-the-vary-header
-- This actually causes the browser to not cache the content of all responses
var dual = \vary -> 
	return \... ->
		var hn = {...}
		
		return \req, res, ... ->
			-- If we `back` from browser, the json is displayed instead of html page!  We need to have api.domain.com or different url instead of just using content-type
			-- if use vary:Accept header, caching is basically disabled by proxies and browsers
			-- http://www.sitepoint.com/solve-caching-conundrums/
			--   Self signed SSL cert won't see the problem, but problem will appear in production!
			-- http://stackoverflow.com/questions/9956255/chrome-displays-ajax-response-when-pressing-back-button
			-- https://bugs.chromium.org/p/chromium/issues/detail?id=108425
			-- https://bugs.chromium.org/p/chromium/issues/detail?id=94369
			
			if vary
				res.headers["Vary"] = "Accept"
			
			-- remember to set response header Vary: Accept
			-- See http://stackoverflow.com/questions/1975416/what-is-the-function-of-the-vary-accept-http-header
			var pref = choose(req.headers["Accept"], {HTML, JSON})
			if tostring(pref[1]) == JSON
				var out = req.next()
				--var tbl = require('losty.tbl')
				--print(tbl.dump(out))
				
				res.headers["Content-Type"] = JSON
				-- just throw if error
				json.encode_empty_table_as_object(false)
				res.body = json.encode(out)
				
				-- no etag if caching is disabled
				var cachectrl = res.headers["Cache-Control"]
				if cachectrl and (strz.contains(cachectrl, "no-cache") or strz.contains(cachectrl, "no-store"))
					return

				var sha = sha1.new(@)
				if sha.update(@, res.body)
					var digest = sha.final(@)
					var etag = str.to_hex(digest)
					-- https://groups.google.com/forum/#!topic/openresty-en/W16iCSRMMZk
					-- http://forum.nginx.org/read.php?2,240120,240120 
					-- https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation
					etag = 'W/"' .. etag .. '"'
					if etag == req.headers["If-None-Match"]
						res.status = 304
						res.body = nil  -- web.lt will clear body anyway
					else
						res.headers["ETag"] = etag
			else
				dispatch(hn, req, res, ...)




-- See
--   https://www.mnot.net/cache_docs/
--   https://devcenter.heroku.com/articles/jax-rs-http-caching
--   https://devcenter.heroku.com/articles/increasing-application-performance-with-http-cache-headers

-- add necessary headers
var header = \req, res ->
	-- see nginx_gzip.conf, gzip_vary on;
	-- res.headers["Vary"] = "Accept-Encoding"
	res.headers["Content-Type"] = "text/html"
	-- we don't want to go inside iframe
	-- res.headers["X-Frame-Options"] = "deny"  -- can be set in nginx.conf   add_header X-Frame-Options "SAMEORIGIN" always;   or "deny" always;
	-- browser must not cache html. Else Login then Back button loses the credential
	res.nocache()
	return req.next()



var form = \req, res ->
	var val, fail = body.buffered(req)
	if val or req.method == 'DELETE'
		return req.next(val)
	-- http://stackoverflow.com/questions/7323958/are-put-and-post-requests-required-expected-to-have-a-request-body
	-- js client should not PUT or POST without a body
	res.status = 400 -- bad request
	return { fail = fail or req.method .. " should have request body" }



return {
	header = header
	, form = form
	-- vary: false - no Vary header, true - url generates text/html and application/json response depending on Accept headers
	-- takes a list of handlers, to preload json (for the sake of Google SEO)
	-- Note that reject will only be called if html() is at the last parameter, meaning no more json handler
	-- See /join to understand usage of dual result based on Accept type
	, html = \vary, ... -> return dual(vary)(header, ...), reject
	, json = dual(false)(reject)
	, reject = reject
}
