-- Cache lock abstraction, from
-- https://github.com/openresty/lua-resty-lock#for-cache-locks

-- Must have this nginx directive at http level
-- lua_shared_dict locks 1m;

var rlock = require('resty.lock')

-- Usage 1: Read from cache if exist, else add to cache
-- Usage 2: Check if file exists, else create the file

-- done is function to try read/check. It shd take the key as param and return non-nil value
-- create is function to create the target if it havent existed

-- returns value from done(), or create()
-- else if create or acquire/lock/unlock failed, returns nil, err

return \lock, key, done, create, ...->
	-- check if exist
	var val, err = done(key)
	if val ~= nil
		return val

	-- not exist, acquire lock...
	var locker = rlock.new(@, lock)
	var elapsed
	elapsed, err = locker.lock(@, key)
	if not elapsed
		ngx.log(ngx.ERR, "Fail to acquire '", key, "' from ", lock, ": ", err)
		return nil, err

	-- lock acquired
	ngx.log(ngx.INFO, "Acquired '", key, "' from ", lock, " after ", elapsed, " seconds")

	-- while waiting, someone might have created the target
	val, err = done(key)
	if val == nil
		val, err = create(...)
	
	-- release lock
	var ok
	ok, err = locker.unlock(@)
	if not ok
		ngx.log(ngx.ERR, "Fail to release '", key, "' from ", lock, ": ", err)
		return nil, err
	return val, err


