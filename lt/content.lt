var cjson = require('cjson')
var sha1 = require('resty.sha1')
var str = require('resty.string')
var strz = require('losty.str')
var body = require('losty.body')
var choose = require('losty.accept')
var dispatch = require('losty.dispatch')

var HTML = "text/html"
var JSON = "application/json"

var reject = \_, res ->
	res.status = ngx.HTTP_NOT_ACCEPTABLE
	-- web.run() already provides desc for status >= 400


-- See
--   https://www.mnot.net/cache_docs/
--   https://devcenter.heroku.com/articles/jax-rs-http-caching
--   https://devcenter.heroku.com/articles/increasing-application-performance-with-http-cache-headers
var html = \req, res ->
	var out = req.next()
	res.headers["Content-Type"] = HTML
	-- see nginx_gzip.conf, gzip_vary on;
	-- res.headers["Vary"] = "Accept-Encoding"
	-- browser must not cache html. Else Login then Back button loses the credential
	res.nocache()
	return out


var json = \req, res ->
	var out = req.next()
	res.headers["Content-Type"] = JSON
	-- just throw if error
	out = cjson.encode(out)

	-- no etag if caching is disabled
	var cachectrl = res.headers["Cache-Control"]
	if cachectrl and (strz.contains(cachectrl, "no-cache") or strz.contains(cachectrl, "no-store"))
		return out

	var sha = sha1.new(@)
	if sha.update(@, out)
		var digest = sha.final(@)
		var etag = str.to_hex(digest)
		-- https://groups.google.com/forum/#!topic/openresty-en/W16iCSRMMZk
		-- http://forum.nginx.org/read.php?2,240120,240120 
		-- https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation
		etag = 'W/"' .. etag .. '"'
		if etag == req.headers["If-None-Match"]
			res.status = ngx.HTTP_NOT_MODIFIED
			return -- no body
		
		res.headers["ETag"] = etag
	return out


-- Once a route respond differently based on HTTP Accept header, shd set Vary: Accept for all responses
-- See https://www.fastly.com/blog/best-practices-for-using-the-vary-header
-- This actually causes the browser to not cache the content of all responses
var dual = \... ->
	var handlers = {...}
	return \req, res ->
		-- If we `back` from browser, the json is displayed instead of html page!  We need to have api.domain.com or different url instead of just using content-type
		-- if use vary:Accept header, caching is basically disabled by proxies and browsers
		-- http://www.sitepoint.com/solve-caching-conundrums/
		--   Self signed SSL cert won't see the problem, but problem will appear in production!
		-- http://stackoverflow.com/questions/9956255/chrome-displays-ajax-response-when-pressing-back-button
		-- https://bugs.chromium.org/p/chromium/issues/detail?id=108425
		-- https://bugs.chromium.org/p/chromium/issues/detail?id=94369
		
		-- See http://stackoverflow.com/questions/1975416/what-is-the-function-of-the-vary-accept-http-header
		res.headers["Vary"] = "Accept"
		
		var pref = choose(req.headers["Accept"], {HTML, JSON})
		if tostring(pref[1]) == HTML
			return dispatch(handlers, req, res)
		return json(req, res)



var form = \req, res ->
	-- val is an iterator function for multipart/form-data
	var val, err = body.prepare(req)
	if val or 'DELETE' == req.vars.request_method
		return req.next(val)
	-- http://stackoverflow.com/questions/7323958/are-put-and-post-requests-required-expected-to-have-a-request-body
	-- js client should not PUT or POST without a body
	res.status = ngx.HTTP_BAD_REQUEST
	return {fail = err or "no request body"}


return {
	form = form
	, reject = reject
	, html = html
	, json = json
	-- url generates text/html and application/json response depending on Accept headers
	-- Note that reject will only be called if dual() is the last handler, meaning no more json handler
	, dual = \... ->
		return dual(html, ...), reject
}
