-- flash is readable by js, so cannot use enc.lt
-- vs session which is encrypted and only readable by server
var json = require('cjson.safe')
var tbl = require('losty.tbl')

-- also different from tbl.add, which set old = v if v is single item
var push = \tb, k, v ->
	var old = tb[k]
	if nil == old
		old = { v }
	else
		if not tbl.find(old, v)
			old[#old + 1] = v
	tb[k] = old


var encode = \obj ->
	assert(obj)
	var str = json.encode(obj)
	return ngx.encode_base64(str)


var decode = \str ->
	if str
		str = ngx.decode_base64(str)
		return json.decode(str)


var Flash = 'flash'
-- var Msg = '_msg'

-- removed on browser close, or manually by javascript
var make = \res ->
	return res.cookie(Flash, false, nil, '/')


-- transfer old to new, and forget old, so we can call this function repeatedly
-- remember to set old with this return value
var transfer = \req, res, old, new ->
	if not new
		new = make(res)(nil, true, req.secure, encode)
	if old
		-- copy old to new, so that flashes is accumulated until read
		for k, v in pairs(old)
			new[k] = v
	-- forget old
	return nil, new


------
-- Each route should call this ONLY ONCE among all handlers, and pass it to following handlers if needed
--   
return \req, res ->

	var old = req.cookies[Flash]
	if old
		old = decode(old)
	var new = res.cookies[Flash]

	var K = {
		set = \key, val ->
			old, new = transfer(req, res, old, new)
			new[key] = val

		-- idempotent
		, get = \key ->
			if old and old[key]
				return old[key]
			if new
				return new[key]

		, delete = \key ->
			if key 
				old, new = transfer(req, res, old, new)
				new[key] = nil
			else
				make(res)(-100)
	}
	
	--`` this is messy. remove
	for _, meth in ipairs({'pass', 'fail', 'warn', 'info'})
		K[meth] = \str ->
			old, new = transfer(req, res, old, new)
			if not new[Msg]
				new[Msg] = {}
			push(new[Msg], meth, str)
	--``
	
	return K

