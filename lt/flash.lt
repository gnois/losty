-- flash is for reading by js, so cannot use enc.lt
-- vs session which is encrypted and only readable by server
var json = require('cjson.safe')
var tbl = require('losty.tbl')

-- also different from tbl.add, which set old = v if v is single item
var push = \tb, k, v ->
	var old = tb[k]
	if nil == old
		old = { v }
	else -- sometimes the browser return expired cookies?
		if not tbl.find(old, v)
			old[#old + 1] = v
	tb[k] = old


var encode = \obj ->
	assert(obj)
	var str = json.encode(obj)
	return ngx.encode_base64(str)


var decode = \str ->
	if str
		str = ngx.decode_base64(str)
		return json.decode(str)


var Msg = '_msg'
var Flash = 'flash'

return \req, res ->

	var old = req.cookies[Flash]
	var new = res.cookies[Flash]
	if not new
		-- removed on browser close, or manually by javascript
		new = res.cookie(Flash, false, nil, '/')(nil, true, req.secure, encode)

	if old
		var x = decode(old)
		if x
			-- copy old to new, so that flashes is accumulated until read
			for k, v in pairs(x)
				new[k] = v

	var K = {
		set = \key, val ->
			new[key] = val
		, get = \key ->
			return new[key]
	}
	
	for _, meth in pairs({'pass', 'fail', 'warn', 'info'})
		K[meth] = \str ->
			if not new[Msg]
				new[Msg] = {}
			push(new[Msg], meth, str)
	
	return K

