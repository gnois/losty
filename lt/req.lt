-- a request wraps ngx.var and ngx.req, with helpers for userid module

var bit = require('bit')
var ffi = require('ffi')

var read_uid = ->
	-- uid is   xxx=hexstring_of_len32, where hexstring is a hex encoding of four *little-endian* four-byte integers underneath
	var str = ngx.var.uid_set or ngx.var.uid_got
	if str
		-- find the first =
		var ind = string.find(str, '=')
		if ind > 0
			var uid = string.sub(str, ind+1)
			if string.len(uid) == 32  -- check in case fake?
				return uid
	-- no need to log
	--ngx.log(ngx.ERR, "req.id_xxx() functions requires nginx directive `userid on;`")

-- convert an int32 into a 4-byte lua string
var binary = \v ->
	var int32 = ffi.typeof("int32_t")
	var int32slot = ffi.typeof("int32_t[1]")
	return ffi.string(int32slot(bit.bswap(v)), ffi.sizeof(int32))

-- https://blog.swiftype.com/2014/02/24/webserveruid-easy-unique-browser-ids-for-rails-better-analytics/
-- https://github.com/swiftype/web_server_uid/blob/master/lib/web_server_uid.rb
-- returns 16 bytes of binary string
var read_uid_binary = ->
	var uid = read_uid()
	if uid
		-- split into four int32
		var a = tonumber(string.sub(uid, 1, 8), 16)
		var b = tonumber(string.sub(uid, 9, 16), 16)
		var c = tonumber(string.sub(uid, 17, 24), 16)
		var d = tonumber(string.sub(uid, 25, 32), 16)
		-- i dunno why need to bswap twice: here and in binary()
		a = bit.bswap(a)
		b = bit.bswap(b)
		c = bit.bswap(c)
		d = bit.bswap(d)
		--``
		var printx = \x ->
			print("0x", bit.tohex(x))
		
		--printx(a)
		--printx(b)
		--printx(c)
		--printx(d)
		``
		var buff = {}
		buff[1] = binary(a)
		buff[2] = binary(b)
		buff[3] = binary(c)
		buff[4] = binary(d)
		var bytes16 = table.concat(buff, '')
		--for i = 1, string.len(bytes16)
		--	print(string.byte(bytes16, i), '  0x' , string.format("%x", string.byte(bytes16, i)))
		return bytes16



-- browser id. requires ngx_http_userid_module with   userid on;
var userid = {
	-- hex format
	id = read_uid
	-- 16 bytes binary string
	, id_binary = read_uid_binary
	-- base64 encoded string, as seen in browser cookie
	-- if you use `userid_mark` directive, that character replaces the first `=` padding at the end of the Base64. 
	-- U need to replace that yourself by finding the first =, then replace your mark char.
	, id_base64 = -> return ngx.encode_base64(read_uid_binary())
}



-- http://nginx.org/en/docs/varindex.html
-- http://nginx.org/en/docs/http/ngx_http_core_module.html, section 'Embedded Variables'

var cookies = setmetatable({}, {
	__metatable = false
	, __index = \_, name ->
		var v = ngx.var['cookie_' .. name]
		return v and ngx.unescape_uri(v)
})

var args = setmetatable({}, {
	__metatable = false
	, __index = \_, name ->
		return ngx.var['arg_' .. name]
})


var headers = setmetatable({}, {
	__metatable = false
	, __index = \_, name ->
		return ngx.var['http_' .. string.lower(string.gsub(name, "-", "_"))]
})


return ->
	return setmetatable({
		vars = ngx.var
		, headers = headers
		, cookies = cookies
		, args = args
		, secure = -> return ngx.var.https == 'on'
	}, {
		__metatable = false
		
		, __index = \tbl, key ->
			var fn = userid[key]
			if fn
				var v = fn()
				-- memoize
				tbl[key] = v
				return v
			return ngx.req[key]
	})
