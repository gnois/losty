-- turn off pgmoon using lpeg warning
-- _G write guard:12: writing a global lua variable ('lpeg') which may lead to race conditions between concurrent requests, so prefer the use of 'local' variables
setmetatable(_G, {__newindex = \t, n, v -> rawset(t, n, v)})

var c = require('losty.exec')
var tbl = require('losty.tbl')

-- dump value into string, used by chk()
var s = \... ->
	var args = {...}
	var n = select("#", ...)
	var out = {}
	for i = 1, n
		var x = args[i]
		if x == nil
			out[i] = "<nil>"
		else if x == ngx.null
			out[i] = "<ngx.null>"
		else if type(x) == 'table'
			out[i] = tbl.dump(x)
		else
			out[i] = tostring(x)
	return table.concat(out, ' ')

-- make short key names for db access
var setup = \db ->
	if db
		var map = {
			s = "select"
			, i = "insert"
			, u = "update"
			, d = "delete"
		}
		var q = db
		-- add shorter function names
		for k, v in pairs(map)
			q[k] = db[v]
			q[k..'1'] = db[v..'1']
		return q



-- db can be nil if not using sql
return \db, func ->

	var q = setup(db)

	-- shorthand to print value
	var prn = \... -> print(s(...))

	var tests = 0
	var fails = 0
	var errors = 0
	-- works like assert, but not terminating
	-- fits nicely with functions returning nil, err
	var chk = \ok, ... ->
		tests = tests + 1
		if ok
			print(c.bright .. c.green .. "ok" .. c.reset)
		else
			fails = fails + 1
			print(c.bright .. c.red .. "fail: " .. s(...) .. c.reset)

	var groups = 0
	var passes = 0
	var test = \desc, fn, rollback ->  -- rollback on error
		groups = groups + 1
		tests = 0
		fails = 0
		errors = 0

		var title = c.bright .. c.cyan .. groups .. ". " .. c.yellow .. "[[ " .. (desc or "?? no name ??") .. " ]]"
		if rollback
			title = title .. c.cyan .. " - WITH ROLLBACK"
		print("                                         " .. title .. c.reset)
		if q and rollback
			q.begin()
		var _, err = xpcall(fn, \err -> return debug.traceback(err, 2))
		if err
			if q and rollback
				q.rollback()
			print(c.bright .. c.red, "\nERROR: " .. err .. "\n" .. c.reset)
			errors = errors + 1
		else
			if q and rollback
				q.rollback()

		if fails == 0 and errors == 0
			passes = passes + 1
					
		var msg = tests .. " checks: " .. tests - fails .. " passed"
		if fails > 0
			msg = msg .. ", " .. fails .. " failed"
		if errors > 0
			msg = msg .. "   [ Error: " .. errors .. " ]"

		var color = fails + errors > 0 and c.cyan or c.green
		print(c.bright .. color .. "                                         ---------- " .. msg .. " ----------\n" .. c.reset)


	if q q.connect()
	func(test, chk, prn, q)
	if q q.disconnect()

	var color = groups - passes > 0 and c.magenta or c.yellow
	print(c.bright .. color .. '                                         === ' .. groups .. " cases:    " .. passes .. " ok,    " .. groups - passes .. " not ok ===\n" .. c.reset)
