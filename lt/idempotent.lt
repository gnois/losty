--``
For idempotent POST request

- Using shdict as state machine and cache: cache lifetime is user defined
advance == incr(key, 1, 0, lifetime)
value - number if progressing in state machine, else is string of encoded result
flags - crc32 of identity for the key that needs to match when retrieving


nginx.conf
----------
 http {
    lua_shared_dict cache_name 50m;

``


var locker = require('losty.lock')
var json = require('cjson.safe')
var crc32 = ngx.crc32_short
-- although the doc says is unsigned, seems like is signed
var intmax = 2147483647


return \lock_name, cache_name, key ->

	var cache = ngx.shared[cache_name]
	if not cache
		error("missing lua_shared_dict ".. cache_name)

	var lock = locker(lock_name)
	var crc = 1 -- in case value is nil, this nonzero flag indicates the value has been inserted
	var expire = 0 -- how many secs to keep state, 0 is no expiry

	-- id must be nil or string
	-- if already started, return false, "exists"
	-- may return false, "no memory"
	-- if ok, return 1
	var start = \id ->
		if id ~= nil
			crc = crc32(id) % intmax
		print(id, ' crc ', crc)
		var ok, err = cache.safe_add(@, key, 1, expire, crc)
		if ok
			return 1, crc
		return ok, err


	-- if exists
	--    if matched id, return val
	--    else   val, 'identity mismatch'
	-- else nil, err
	var get = \id ->
		var val, flags = cache.get(@, key)
		--print(id, ' flags ', flags)
		if "number" == type(flags) -- not error
			if id == nil and flags == 1
				return val, flags
			if id and crc32(id) % intmax ~= flags
				return val, "identity mismatch"
		return val, flags



	return {
		-- if check started but error, return nil, err
		-- else lock if can
		--    if already started, returns 1 or 2 or 3 or 4 ...
		--    else start, return 1
		--      caller can release() later, or let it auto unlock
		-- else false, "exists"

		-- sec - (required) hold secs before auto unlock, eg: 10
		-- expiry - (optional) how many secs to keep state in secs, eg: 24 * 3600 is 24 hrs
		acquire = \id, secs, expiry ->
			-- try read
			var val, c = get(id)
			if 'string' == type(c) -- error
				return nil, c

			-- get the crc if any, for save() later
			crc = c
			expire = expiry or 0
			var ok, err = lock.lock(key, secs)
			if ok
				if c == nil -- not found
					return start(id), nil
				-- decode if saved state
				if 'number' == type(val)
					return val, nil
				var out = json.decode(val)
				return out.state, out.data
			return ok, err


		, release = ->
			lock.unlock(key)

		-- if exists
		--   if saved, return nil, "not a number"
		--   else  return 2, 3 ...
		-- else nil, "not found"
		, advance = ->
			if lock.locked(key)
				return cache.incr(@, key, 1)
			return false, "not locked"

		
		-- state must be int
		-- data is optional
		--    if data is nil then can call advance() again
		-- returns true if ok
		, save = \state, data ->
			if lock.locked(key)
				var val = state
				if data ~= nil
					val = json.encode({state = state, data = data})
				var ok, err = cache.replace(@, key, val, expire, crc)
				if ok
					return state
				return ok, err
			return false, "not locked"
	}


