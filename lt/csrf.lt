-- https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
-- https://flask-wtf.readthedocs.io/en/stable/csrf.html
-- reuses key in cookie, instead of generating new one for each request
--  else browser `Back` button always fail csrf check

var wrap = require('losty.wrap')
var rnd = require('losty.rand')

var Name = 'csrf'

var make = \res ->
	return res.cookie(Name, true, nil, '/')

var write = \req, res ->
	var key = rnd.least(8)
	make(res)(nil, true, req.secure, key)
	return key

var read = \req ->
	return req.cookies[Name]


return \secret ->
	return {
		-- insert key in httponly cookie and return token (for use in form hidden input or ajax header)
		-- cookie removed on browser close
		-- expiry can be nil, means no expiry
		create = \req, res, expiry ->
			var key = read(req)
			if not key
				key = write(req, res)
			expiry = expiry or 0
			if expiry > 0
				expiry = ngx.time() + expiry
			
			var bag = wrap(secret, key)
			var sig, data = bag.wrap(expiry)
			return sig .. "." .. data


		, check = \req, res, token ->
			var key = read(req)
			if key and token
				var bag = wrap(secret, key)
				var sig, data = string.match(token, "^(.*)%.(.*)$")
				if data
					var expiry = bag.unwrap(sig, data)
					if expiry 
						if expiry == 0 or expiry > ngx.time()
							return true
						-- remove expired cookie
						make(res)(-10)
						return false, "token expired"
			-- leave cookie untouched
			return false, "forbidden"
	}
	
