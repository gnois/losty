-- https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
-- https://flask-wtf.readthedocs.io/en/stable/csrf.html
-- reuses key in cookie, instead of generating new one for each request
--  else browser `Back` button always fail csrf check

var sign = require('losty.sign')
var enc = require('losty.enc')
var rnd = require('losty.rand')

var Name = 'csrf'

var make = \res ->
	return res.cookie(Name, false, nil, '/')

var write = \req, res ->
	var c = make(res)(nil, true, req.secure, enc.encode)
	c.key = rnd.least(8)
	return c.key

var read = \req ->
	var c = enc.decode(req.cookies[Name])
	return c and c.key
	
	
return \secret ->
	var sg = sign(secret)

	return {
		-- insert key in httponly cookie and return token (for use in form hidden input or ajax header)
		-- cookie removed on browser close
		-- expiry can be nil, means no expiry
		create = \req, res, expiry ->
			var key = read(req)
			if not key
				key = write(req, res)
			expiry = expiry or 0
			if expiry > 0
				expiry = ngx.time() + expiry
			return sg.sign(key, expiry)


		, check = \req, res, token ->
			var key = read(req)
			if key and token
				var expiry, err = sg.unsign(key, token)
				if expiry and (expiry == 0 or expiry > ngx.time())
					return true
				-- remove expired cookie
				make(res)(-10)
				return false, "token expired"
			return false, "forbidden"
	}
	
