var tbl = require('losty.tbl')
var set = require('losty.set')
var concat = table.concat
var remove = table.remove
var insert = table.insert
var yield = coroutine.yield
var create = coroutine.create
var resume = coroutine.resume
var gmatch = string.gmatch
var gsub = string.gsub
--
-- _G.table and _G.select are masked by html tag of the same name
--   select has no replacement
--   Use concat, insert and remove without qualifying table
--
var void_tags = set(
	'area'
	, 'base'
	, 'br'
	, 'col'
	, 'command'
	, 'embed'
	, 'hr'
	, 'img'
	, 'input'
	, 'keygen'
	, 'link'
	, 'meta'
	, 'param'
	, 'source'
	, 'track'
	, 'wbr'
)

var parse = \s ->
	var r = create( ->
		var acc, n = {}, 1
		for c in gmatch(s, '.')
			if c == '.' or c == '#' or c == '['
				-- dont yield if still in bracket
				if acc[1] == '['
					acc[n] = c --insert(acc, c)
					n = n + 1
				else
					if acc[1]
						yield(acc)
					acc = {c}
					n = 2
			else --if c ~= ' '  -- meta description needs the space
				acc[n] = c --insert(acc, c)
				n = n + 1
				if c == ']'
					--if #acc > 2
					if n > 3
						yield(acc)
					acc = {}
					n = 1
		if acc[1]
			yield(acc)
	)
	return ->
		var code, res = resume(r)
		return res


var NoChild = \tag ->
	return "<" .. tag .. "> cannot have child element"


-- void tag
var void = \tag, attrs ->
	var cell = {_tag = tag, attrs = {}}
	var classes, n = {}, 1
	if attrs ~= nil
		var kind = type(attrs)
		if 'string' == kind
			for v in parse(attrs)
				if v[1] == '#'
					cell.attrs.id = concat(v, '', 2)
				else if v[1] == '.'
					classes[n] = concat(v, '', 2) --insert(classes, concat(v, '', 2))
					n = n + 1
				else if v[1] == '['
					var i = tbl.find(v, '=')
					var key, val
					if i
						key = concat(v, '', 2, i-1)
						val = concat(v, '', i+1, #v-1)
						val = gsub(val, "['\"](%w+)['\"]", '%1')
					else
						key = concat(v, '', 2, #v-1)
						val = true
					cell.attrs[key] = val
				else
					var msg = tag .. "('" .. concat(v) .. "'"
					error(msg .. " attribute must start with `.` or `#` or `[`", 2)

		else if 'table' == kind
			-- attr cannot be array
			if attrs[1]
				error(NoChild(tag), 2)

			for key, val in pairs(attrs)
				-- attr cannot have {_tag=...}
				if key == '_tag'
					error(NoChild(tag), 2)
				if key == 'class'
					if val ~= nil and val ~= ''
						classes[n] = val --insert(classes, val)
						n = n + 1
				else
					cell.attrs[key] = val
		else
			var msg = tag .. '(' .. kind .. ')'
			error("Attribute must be a table or a string: " .. msg, 2)

	if classes[1]
		cell.attrs['class'] = concat(classes, ' ')

	return cell

-- normal tag
var normal = \tag, ... ->
	var args = {...}
	var attr
	if args[2]
		-- test if possible attr
		var a = args[1]
		var k = type(a)
		if a == nil
			attr = true
		else if 'string' == k
			-- be attr once is a string, and error if string is not empty and not starting with . # [
			-- rather than silenty make it child node on typo
			--`
			attr = #a == 0
			if not attr
				var ch1 = string.sub(a, 1, 1)
				-- or starts with ., # or [
				attr = ch1 == '.' or ch1 == '#' or ch1 == '['
			--`
			attr = true
		else if 'table' == k
			-- attr cannot be array and cannot have key `_tag`
			attr = a[1] == nil and a._tag == nil

	--print('attr', attr)
	var attrib
	if attr
		attrib = args[1]
		remove(args, 1)

	var cell = void(tag, attrib)
	cell._children = args
	return cell


var markup
markup = \nodes ->
	if nodes ~= nil
		var o, n = {}, 1
		if 'table' == type(nodes)
			if nodes and nodes._tag
				o[n] = '<' .. nodes._tag
				n = n + 1
				for k, v in pairs(nodes.attrs)
					o[n] = ' ' .. k
					n = n + 1
					if 'boolean' ~= type(v)
						o[n] = '="' .. v .. '"'
						n = n + 1
				o[n] = '>'
				n = n + 1
				if not void_tags.has(nodes._tag)
					o[n] = markup(nodes._children)
					n = n + 1
					o[n] = '</' .. nodes._tag .. '>'
					n = n + 1
			else
				for _, c in ipairs(nodes)
					o[n] = markup(c)
					n = n + 1
		else
			o[n] = tostring(nodes)
			n = n + 1
		return concat(o)
	return ''


var view = \func, args ->
	var env = {
		concat = concat
		, insert = insert
		, remove = remove
	}
	env = setmetatable(env, {
		__index = \t, name ->
			--print(name)
			if void_tags.has(name)
				return \attrs, w, x, y, z ->
					if w or x or y or z
						error(NoChild(name), 2)
					return void(name, attrs)
			var x = _G[name]
			if x
				return x
			return \... ->
				return normal(name, ...)
	})
	func = setfenv(func, env)
	-- not using pcall(), let it throw if error
	var list = func(args)
	--print(tbl.dump(list))
	var html = markup(list)

	return html  -- caller to prepent '<!DOCTYPE html>



--```
var test = ->
	var v = \fn, a -> return view(fn, a, true)
	var as = assert
	var pr = print

	-- void element
	as(v(-> return br()) == '<br>')
	as(v(-> return br(nil)) == '<br>')  -- attr can be nil
	as(v(-> return br('')) == '<br>')  -- or string
	as(v(-> return br({})) == '<br>') -- or table
	as(v(-> return img({src='/a.png', alt='A'})) == '<img alt="A" src="/a.png">')  -- using table as attr

	-- error: void element cannot have children
	as(pcall(v, -> return hr(hr())) == false)
	as(pcall(v, -> return hr({div(), span()})) == false)


	-- normal element
	as(v(-> return div()) == '<div></div>')
	as(v(-> return div("foo")) == '<div>foo</div>')  -- by default, args are children
	-- if 2nd arg exists, and 1st arg is a str or a tbl with key/val (except key '_tag'), then 1st arg is attr
	as(v(-> return div(".foo", '')) == '<div class="foo"></div>')
	-- invalid attr
	as(pcall(v, -> return div("   .foo", '')) == false)
	as(v(-> return div("#id1.foo", '')) == '<div class="foo" id="id1"></div>')  -- #str is id, .str is class
	as(v(-> return div("[class=foo][title=bar]", {})) == '<div title="bar" class="foo"></div>') -- or str of boxed [key=value] list
	as(v(-> return div("[id=id1][title='bar']", "x")) == '<div title="bar" id="id1">x</div>')  -- quotes in boxed attr are optional
	as(v(-> return div("[title=\"bar\"]", 1)) == '<div title="bar">1</div>')  -- children can take number or str

	as(v(-> return p(h1("blog"))) == '<p><h1>blog</h1></p>')  -- child can be a single element

	as(v(-> return nav(span('z'), span(1), span(false))) == '<nav><span>z</span><span>1</span><span>false</span></nav>') -- children can be args
	as(v(-> return p({"AA", mark("mk")}, "YY", "ZZ")) == '<p>AA<mark>mk</mark>YYZZ</p>') -- children can be args
	as(v(-> return p({"AA", mark("mk"), "ZZ"})) == '<p>AA<mark>mk</mark>ZZ</p>') -- children can be an array
	as(v(-> return ul({ li("item1"), li("item2")})) == '<ul><li>item1</li><li>item2</li></ul>') -- children can be an array
	as(v(-> return a({href = "/"}, strong(nil, "Home"))) == '<a href="/"><strong>Home</strong></a>')

	as(v(-> return {img("[src=/img/tmp file.png]"), span("span1")}) == '<img src="/img/tmp file.png"><span>span1</span>') -- view function can return a list
	as(v(-> return {"AAA", "bbb", p("para")}) == 'AAAbbb<p>para</p>')  -- list with plain string too

	print('pass')


test()
---```

return view
