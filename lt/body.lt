var upload = require('resty.upload')
var cjson = require('cjson.safe')
var str = require('losty.str')

var raw = \req ->
	var data = req.get_body_data()
	if not data
		var file = req.get_body_file()
		if file 
			var fp, err = io.open(file, 'r')
			if not fp
				return fp, err
			data = fp.read(@, '*a')
			fp.close(@)
	return data


var json = \req ->
	var r, err = raw(req)
	if r
		return cjson.decode(r)
	return r, err


var K = {}

K.raw = \req ->
	req.read_body()
	return raw(req)
	

-- chunked encoding
-- https://github.com/openresty/lua-nginx-module/blob/master/t/116-raw-req-socket.t

-- http://stackoverflow.com/questions/18877778/how-to-inspect-post-body-in-nginx-httpluamodule/19060711#19060711
-- buffered way
-- only for HTTP 1.x
K.buffered = \req ->
	if req.headers["Transfer-Encoding"] or req.headers["Content-Length"]
		req.read_body()
		var ctype = req.headers["Content-Type"]
		if ctype
			if string.match(ctype, "urlencoded")
				return req.get_post_args()
			if string.match(ctype, "octet-stream")
				return raw(req)
			if string.match(ctype, "json")
				return json(req)
			return nil, "Unfamiliar content-type " .. ctype
		return nil, "Missing content-type"
	return false, "Empty request body"



-- streaming way
-- https://github.com/openresty/lua-resty-websocket/


--``
coroutine yields key, val
case key
	string: means header key, val
	true: val is partial body
	false: one body ended, val is nil
	nil: all body ended. val is err or nil
--``

var yield = coroutine.yield

var content_disposition = \value ->
	var dtype, params = string.match(value, '([%w%-%._]+);(.+)')
	if dtype and params
		var out, o = {}, 0
		for param in str.gsplit(params, ';')
			var key, val = string.match(param, '([%w%.%-_]+)="(.+)"$')
			if key
				o = o + 1
				out[o] = {key, val}
		return out


var parser =  ->
	var input, err = upload.new(@, 4096)
	if input
		input.set_timeout(@, 2000) -- 2 sec
		var t, data
		do
			t, data, err = input.read(@)
			if t
				if 'header' == t
					var name, value = unpack(data)
					if name == 'Content-Disposition'
						var params = content_disposition(value)
						if params
							for _, v in ipairs(params)
								yield(v[1], v[2])
					else
						yield(string.lower(name), value)
				else if 'body' == t
					yield(true, data)
				else if 'part_end' == t
					yield(false, nil)
			else
				err = err or "Fail to parse upload data"
		until not t or t == 'eof'
	return nil, err


K.multipart = \req ->
	var parse = coroutine.create(parser)
	return ->
		var ctype = req.headers["Content-Type"]
		if ctype and string.match(ctype, "multipart")
			var code, key, val = coroutine.resume(parse)
			return key, val
		return nil, "Expected multipart/form-data but received " .. ctype or 'nil'


return K