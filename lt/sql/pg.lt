var pgmoon = require('pgmoon')
var parrays = require('pgmoon.arrays')  -- encode_array()  cannot handle empty array and array of row types
var pjson = require('pgmoon.json')
var phstore = require('pgmoon.hstore')
var sql = require('losty.sql.base')
var str_gsub = string.gsub

-- Remember to call setup_hstore()

var escape = {
	literal = \val ->
		if val == nil or val == ngx.null
			return "NULL"

		var ty = type(val)
		if 'number' == ty or 'boolean' == ty
			return tostring(val)
		else if 'string' == ty
			return "'" .. str_gsub(val, "'", "''") .. "'"
		error("cannot escape literal " .. tostring(val))

	, identifier = \val ->
		if 'string' == type(val)
			return '"' .. str_gsub(val, '"', '""') .. '"'
		error("cannot escape identifier " .. tostring(val))

	, any = \val, mode ->
		-- transform comments, strip semicolon
		var s = str_gsub(val, "/%*", "/ *")
		s = str_gsub(s, "%*/", "* /")
		s = str_gsub(s, "%-%-", "- -")
		s = str_gsub(s, ";", "")
		return str_gsub(s, mode, "")
		
}


return \database, user, password, host, port, pool, dbg ->

	var db = pgmoon.new({database = database, user = user, password = password, host = host, port = port, pool = pool})
	-- nil works better in conditional expr
	--db.convert_null = true
	--db.NULL = ngx.null


	-- make composite value, probably inside array like ARRAY['(,,"",)', '(,,,"")']
	-- https://www.postgresql.org/docs/11/rowtypes.html
	-- https://www.postgresql.org/docs/11/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS
	var encode_row
	encode_row = \t ->
		var out = {}
		for i, v in ipairs(t)
			var o
			if v == ngx.null
				o = ''  -- null is bare
			else
				var ty = type(v)
				if 'table' == ty
					o = encode_row(v)
				else if 'string' == ty
					if 0 == string.len(v)
						o = '""'
					else
						o = str_gsub(v, ",", "\\,")
				else
					o = tostring(v) or ''
			out[i] = o
		return "(" .. table.concat(out, ",") .. ")"


	-- mode must be a char
	var encode = \mode, v ->
		if v == nil or v == ngx.null
			return "NULL"

		var ty = type(v)
		if 'table' == ty
			if mode == 'r'
				return escape.literal(encode_row(v))
			else if mode == 'a'
				return parrays.encode_array(v)
			else if mode == 'h'
				return phstore.encode_hstore(v)
			else if mode == '?'
				return pjson.encode_json(v)

		else if 'number' == ty or 'string' == ty or 'boolean' == ty
			if mode == 'b'
				return db.encode_bytea(@, v)
			else if mode == '?'
				return escape.literal(v)
			else if mode == '!'
				return escape.identifier(v)
			else if mode == ')' or mode == ']'    -- this allow SQL injection and inputs like   date 'today' + interval '1 month'. Use with care!!
				return escape.any(v, "%" .. mode)

		return nil, "invalid placeholder `:" .. mode .. "` for a " .. ty


	-- To list all pgsql operators
	-- psql
	-- \do ?
	-- \do ??
	-- \do ???
	-- why not named parameter :var: inside query ? coz Luaty can no longer check use of undeclared variable
	-- Only nil, boolean, number, string and table acceptable as arguments for placeholder
	var interpolate = \query, ... ->
		var args = {...}
		var i = 0
		return (str_gsub(query, "(:?):([a-z!%?%)%]])", \c, mode ->
			-- if using [^:] instead of (:?), we will miss :? at the beginning of a line
			if c == ':'  -- return verbatim
				return '::' .. mode

			i = i + 1
			var s, err = encode(mode, args[i])
			if s
				return s
			ngx.log(ngx.ERR, err .. " at position ", i)

		)), i


	var run = \str, ... ->
		var n = select("#", ...)
		var q, i = interpolate(str, ...)
		if n ~= i
			ngx.log(ngx.ERR, "trying to match ", i ," placeholders to ", n ," arguments for query `", str, "`")

		if dbg
			--ngx.log(ngx.NOTICE, q)  -- this one does not show on screen
			print(q)

		var result, err, partial, count = db.query(@, q)
		-- a real error has nil result, and err is a string
		-- err can be the number of queries, 0 if all are comments, which is not an error
		if nil == result and not tonumber(err)
			ngx.log(ngx.ERR, q)
			ngx.log(ngx.ERR, err)
		return result, err, partial, count

	var keepalive = \timeout ->
		db.keepalive(@, timeout)

	var K = sql(db, run)

	K.encode = encode

	K.hstore = ->
		db.setup_hstore(@)

	-- returns variadic arguments that are interpolated
	-- eg: variadic("?", 'a', 'b', 'c') gives a string "'a','b','c'"
	K.variadic = \mode, ... ->
		var n = select("#", ...)
		if n > 0
			var places = string.rep(", " .. mode, n - 1)
			return (interpolate(mode .. places, ...))  -- () parenthesis to remove other returns


	-- must only connect() inside a function, not at top level
	-- else Error: cannot yield across C-call boundary
	K.connect = ->
		assert(db.connect(@))
		--db.query(@, "SET TIME ZONE 'UTC';")

	-- closes the connection, vs disconnect() which keepalive the connection and rollback uncommitted transaction
	K.close = ->
		db.disconnect(@)

	-- if read timed out, pgmoon closes the socket for us
	-- no need to wrap in xpcall()
	K.listen = ->
		return db.wait_for_notification(@)

	K.subscribe = \channel ->
		return db.query(@, 'LISTEN ' .. channel)

	K.unsubscribe = \channel ->
		return db.query(@, 'UNLISTEN ' .. channel)


	var tx = 0
	var sp_name = ->
		var id = ngx.worker.pid()
		return 'SP' .. tx .. '_' .. id

	-- timeout = 0 means wont timeout in the pool
	K.disconnect = \timeout ->
		if tx > 0
			db.query(@, 'ROLLBACK')
			tx = 0
		keepalive(timeout)

	K.begin = \serializable ->
		var cmd
		if tx < 1
			if serializable == true
				cmd = 'BEGIN ISOLATION LEVEL SERIALIZABLE'
			else if serializable == false
				cmd = 'BEGIN ISOLATION LEVEL REPEATABLE READ'
			else
				cmd = 'BEGIN'
		else
			cmd = 'SAVEPOINT ' .. sp_name()
		tx = tx + 1
		if dbg
			print(cmd)
		return db.query(@, cmd)

	K.commit = ->
		assert(tx > 0, "no transaction or savepoint to commit")
		tx = tx - 1
		var cmd = tx < 1 and 'COMMIT' or 'RELEASE SAVEPOINT ' .. sp_name()
		if dbg
			print(cmd)
		return db.query(@, cmd)


	K.rollback = ->
		assert(tx > 0, "no transaction or savepoint to rollback")
		tx = tx - 1
		var cmd = tx < 1 and 'ROLLBACK' or 'ROLLBACK TO SAVEPOINT ' .. sp_name()
		if dbg
			print(cmd)
		return db.query(@, cmd)

	return K

