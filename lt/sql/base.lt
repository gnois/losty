var map = {
	select = "SELECT "
	, insert = "INSERT INTO "
	, update = "UPDATE "
	, delete = "DELETE FROM "
}


return \db, run, keepalive ->
	var began = false

	var K = {
		run = run
	}
	
	-- https://github.com/openresty/lua-nginx-module#lua_socket_connect_timeout
	-- default 60s each for connect, send and read
	-- but unit here is in ms
	K.settimeouts = \connect, send, read ->
		db.settimeouts(@, connect, send, read)

	-- timeout = 0 means wont timeout in the pool
	K.disconnect = \timeout ->
		if began
			db.query(@, 'ROLLBACK;')
			began = false
		keepalive(timeout)

	K.begin = ->
		assert(not began, "Already inside a transaction")
		if db.query(@, 'BEGIN;')
			began = true
			return true
		return false

	K.commit = ->
		assert(began, "Cannot COMMIT without transaction")
		if db.query(@, 'COMMIT;')
			began = false
			return true
		return false
		
	K.rollback = ->
		assert(began, "Cannot ROLLBACK without transaction")
		if db.query(@, 'ROLLBACK;')
			began = false
			return true
		return false

	-- query returns multiple rows
	-- caller to test for result[1]
	for k, v in pairs(map)
		K[k] = \sql, ... ->
			return run(v .. sql, ...)

	-- query returns only one row
	-- caller can index result if not nil
	var one = \query, ... ->
		var res, err, partial, count = run(query, ...)
		var result = res and res[1]
		return result, err, partial, count
	
	for k, v in pairs(map)
		K[k .. '1'] = \sql, ... ->
			return one(v .. sql, ...)

	return K