-- a res() is merely status and header
var ngx_header = ngx.header

var insert
insert = \tb, v ->
	if 'table' == type(v)
		for _, x in ipairs(v)
			insert(tb, x)
	else
		table.insert(tb, v)


-- append v to ngx.header[k]
-- why append? "for single valued header, only the last array item is sent"
var push = \tb, k, v ->
	var old = tb[k]
	if nil == old
		tb[k] = v
	else if 'table' == type(old)
		insert(old, v)
	else if 'table' == type(v)
		-- old is surely scalar here
		-- convert to table then append
		var oldt = {old}
		insert(oldt, v)
		tb[k] = oldt
	else
		tb[k] = {v, old}


--`` unused, ngx lua will do this
-- capitalize word, t.foo_bar becomes t['Foo-Bar']
var capitalize = \txt ->
	if txt
		return string.lower(txt).gsub(@, "^%l", string.upper).gsub(@, "-%l", string.upper)
``

-- ngx.header wrapper, store nothing
-- headers[key] = x
-- if x is nil/{}, clears headers[key]
-- else will append to existing header[key]
-- ngx.header doc: for single valued header, only the last array item is sent
var headers = setmetatable({}, {
	__metatable = false

	, __index = \_, k ->
		-- not calling ngx.resp.get_headers()
		-- https://github.com/openresty/lua-nginx-module/issues/1595
		return ngx_header[k]

	, __newindex = \_, k, v ->
		if nil == v or (type(v) == 'table' and next(v) == nil)
			-- ngx.header doc: set to nil or {} clears the header k
			ngx_header[k] = nil
		else
			push(ngx_header, k, v)
})


-- shortcut header functions

-- no caching
var nocache = ->
	headers["Cache-Control"] = "no-cache"   -- no-store ? github.com does not have max-age=0, s-maxage=0, must-revalidate, proxy-revalidate

-- set status and caching (in seconds)
var cache = \status, sec ->
	ngx.status = status
	-- should check if status equals 200, 201, 204, 206, 301, 302, 303, 304, or 307
	if status < 400
		-- http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires
		headers["Cache-Control"] = "max-age=" .. sec     -- 'public' by default
		-- http://www.freshblurbs.com/blog/2015/12/12/http-cache-restful-apis.html
		-- headers["Expires"] = ngx.http_time(ngx.time() + sec)

--``
See
https://en.wikipedia.org/wiki/HTTP_302, first paragraph
https://en.wikipedia.org/wiki/HTTP_303
http://stackoverflow.com/questions/5129076/after-a-post-should-i-do-a-302-or-a-303-redirect
``
var redirect = \url, same_method ->
	if same_method   -- if request method is POST, use POST again to get the new resource
		ngx.status = ngx.HTTP_TEMPORARY_REDIRECT
	else -- always use GET to get the new resource
		ngx.status = ngx.HTTP_SEE_OTHER
	headers['Location'] = url

-- see http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/ section 'Cookie maintenance and lifecycle'
-- https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html

-- a cookie has identity: name, domain, path and httponly
-- it cannot be deleted from browser if any of these mismatch
-- domain shd be nil, to exclude subdomain. if specified, subdomains are always included
-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
var jar, order, o -- guarantee the order of cookie by creation, for encoding function that return multiple values (sess.lt)
var cookie = \name, httponly, domain, path ->
	if not name
		error("cookie must have a name", 2)

	var c = {
		_name = name
		, _httponly = httponly
		, _domain = domain
		, _path = path
	}

	var data = setmetatable({}, {
		__metatable = false
		-- expose attributes
		, __index = c

		-- non identity, not needed for delete cookie: age, samesite, secure
		-- age in secs, nil means last till browser close, -ve means delete
		-- samesite can be bool or string [lax|strict|none]. true=strict, false=none, nil means samesite not set (defaults to 'lax' by browser)
		-- secure is bool, use req.secure()
		-- value can be nil, string or function.
		--   nil becomes empty string
		--   if string, taken as is
		--   if function, shd encode the data table
		, __call = \t, age, samesite, secure, value ->
			c._age = age
			c._samesite = samesite
			c._secure = secure
			c._value = value
			return t
	})

	if jar[name]
		ngx.log(ngx.NOTICE, "Overwriting cookie " .. name)

	-- ok if overwrite, still preserve order
	o = o + 1
	order[o] = name

	jar[name] = data
	return data



var bake = \c ->
	var val = c._value
	if val
		if 'function' == type(val)
			val = val(c)
	val = val and ngx.escape_uri(val) or ""

	var z = { c._name .. "=" .. val }
	var y = 2

	if c._domain
		z[y] = "Domain=" .. c._domain
		y = y + 1
	if c._path
		z[y] = "Path=" .. c._path
		y = y + 1
	var a = tonumber(c._age)
	if a
		if a ~= 0
			z[y] = "Expires=" .. ngx.cookie_time(ngx.time() + a)
			y = y + 1
		-- Max-Age cannot be zero or -ve
		if a > 0
			z[y] = "Max-Age=" .. a
			y = y + 1
	var ss = c._samesite
	if ss ~= nil
		if 'boolean' == type(ss)
			ss = ss and "strict" or "none"
		z[y] = "SameSite=" .. ss
		y = y + 1
	if c._httponly
		z[y] = "HttpOnly"
		y = y + 1
	if c._secure
		z[y] = "Secure"

	return table.concat(z, ";")



-- send headers
var send = ->
	var arr = {}
	if o > 0
		for n, k in ipairs(order)
			arr[n] = bake(jar[k])
		headers['Set-Cookie'] = arr
	return ngx.send_headers()



return ->
	jar = {}
	order, o = {}, 0
	var cookies = setmetatable({}, {
		__index = jar
		, __newindex = ->
			error("use response.cookie() to update response cookies", 2)
	})

	return setmetatable({
		headers = headers
		, nocache = nocache
		, cache = cache
		, cookie = cookie
		, cookies = cookies
		, redirect = redirect
		, send = send

	}, {
		__metatable = false

		, __index = \_, k ->
			if 'status' == k
				return ngx.status

		, __newindex = \_, k, v ->
			if 'status' == k
				ngx.status = v
	})
