-- a resp is merely status and header
var insert
insert = \tb, v ->
	if 'table' == type(v)
		for _, x in ipairs(v)
			insert(tb, x)
	else
		table.insert(tb, v)


-- push a string or array to ngx.header[k]
var push = \tb, k, v ->
	var old = tb[k]
	if nil == old
		tb[k] = v
	else if 'table' == type(old)
		insert(old, v)
	else if 'table' == type(v)
		insert(v, old)
		tb[k] = v
	else
		tb[k] = {old, v}


--`` unused, ngx lua will do this

-- underscore to dash
var normalize = \txt ->
	if txt
		return string.gsub(txt, "_", "-")

-- capitalize word, t.foo_bar becomes t['Foo-Bar']
var capitalize = \txt ->
	if txt
		return string.lower(txt).gsub(@, "^%l", string.upper).gsub(@, "-%l", string.upper)
``

-- ngx.header wrapper, store nothing
-- headers[key] = x will append to existing header[key] array, unless x is nil
-- for single valued header, only the last array item is sent
var headers = setmetatable({
}, {
	__metatable = false
	
	, __index = \_, k ->
		-- header is being updated, so not calling ngx.resp.get_headers()
		return ngx.header[k]
	
	, __newindex = \_, k, v ->
		if nil == v
			ngx.header[k] = v
		else
			push(ngx.header, k, v)
})


-- see http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/ section 'Cookie maintenance and lifecycle'
-- https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html

-- a cookie has identity: name, domain, path and httponly
-- it cannot be deleted from browser if any of these mismatch
-- domain shd be nil, to exclude subdomain. if specified, subdomains are always included
-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
var jar = {}
var cookie = \name, httponly, domain, path ->
	if not name
		error("cookie must have a name")

	var c = {
		_name = name
		, _httponly = httponly
		, _domain = domain
		, _path = path
	}
	
	var data = setmetatable({}, {
		__metatable = false
		-- expose attributes
		, __index = c

		-- non identity, not needed for delete cookie: age, samesite, secure
		-- age in secs, nil means last till browser close, -ve means delete
		-- samesite can be bool or string [lax|strict|none]. true means strict
		-- secure is bool, use req.secure
		-- value can be nil, string or function. 
		--   nil becomes empty string
		--   if string, taken as is
		--   if function, shd encode the data table
		, __call = \t, age, samesite, secure, value ->
			c._age = age
			c._samesite = samesite
			c._secure = secure
			c._value = value
			return t
	})
	
	if jar[name]
		ngx.log(ngx.NOTICE, "Overwriting cookie named " .. name)

	jar[name] = data
	return data



var bake = \c ->
	var val = c._value
	if val
		if 'function' == type(val)
			val = val(c)
	val = val and ngx.escape_uri(val) or ""
	
	var z = { c._name .. "=" .. val }
	var y = 2

	if c._domain
		z[y] = "Domain=" .. c._domain
		y = y + 1
	if c._path
		z[y] = "Path=" .. c._path
		y = y + 1
	var a = tonumber(c._age)
	if a
		if a ~= 0
			z[y] = "Expires=" .. ngx.cookie_time(ngx.time() + a)
			y = y + 1
		-- no zero or -ve max age
		if a > 0
			z[y] = "Max-Age=" .. a
			y = y + 1
	var ss = c._samesite
	if ss
		if 'boolean' == type(ss) and ss
			ss = "strict"
		z[y] = "SameSite=" .. ss
		y = y + 1
	if c._httponly
		z[y] = "HttpOnly"
		y = y + 1
	if c._secure
		z[y] = "Secure"
		
	return table.concat(z, ";")



return setmetatable({
	headers = headers
	, cookie = cookie
	, cookies = jar
	
	-- shortcut header functions
	-- no caching
	, nocache = ->
		headers["Cache-Control"] = "no-cache"   -- no-store ? github.com does not have max-age=0, s-maxage=0, must-revalidate, proxy-revalidate
		
	-- caching headers (in seconds)
	, cache = \sec ->
		-- should check if status equals 200, 201, 204, 206, 301, 302, 303, 304, or 307
		if ngx.status < 400
			-- http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires
			headers["Cache-Control"] = "max-age=" .. sec     -- 'public' by default
			-- http://www.freshblurbs.com/blog/2015/12/12/http-cache-restful-apis.html
			-- headers["Expires"] = ngx.http_time(ngx.time() + sec)

	--``
	See 
	https://en.wikipedia.org/wiki/HTTP_302, first paragraph
	https://en.wikipedia.org/wiki/HTTP_303
	http://stackoverflow.com/questions/5129076/after-a-post-should-i-do-a-302-or-a-303-redirect
	
	, redirect = \url, permanent ->
		if permanent
			ngx.status = ngx.HTTP_MOVED_PERMANENTLY
		else
			ngx.status = ngx.HTTP_MOVED_TEMPORARILY
		headers['Location'] = url
	--``

	, redirect = \url, same_method ->
		if same_method   -- if request method is POST, use POST again to get the new resource
			ngx.status = ngx.HTTP_TEMPORARY_REDIRECT
		else -- always use GET to get the new resource
			ngx.status = ngx.HTTP_SEE_OTHER
		headers['Location'] = url


	, send = ->
		var arr, n = {}, 0
		for _, c in pairs(jar)
			n = n + 1
			arr[n] = bake(c)
		if n > 0
			headers['Set-Cookie'] = arr
		ngx.send_headers()

}, {
	__metatable = false
	
	, __index = \_, k ->
		if 'status' == k
			return ngx.status

	, __newindex = \_, k, v ->
		if 'status' == k
			ngx.status = v
})





--``
ngx predefined status

ngx.HTTP_CONTINUE (100)
ngx.HTTP_SWITCHING_PROTOCOLS (101)
ngx.HTTP_OK (200)
ngx.HTTP_CREATED (201)
ngx.HTTP_ACCEPTED (202)
ngx.HTTP_NO_CONTENT (204)
ngx.HTTP_PARTIAL_CONTENT (206)
ngx.HTTP_SPECIAL_RESPONSE (300)
ngx.HTTP_MOVED_PERMANENTLY (301)
ngx.HTTP_MOVED_TEMPORARILY (302)
ngx.HTTP_SEE_OTHER (303)
ngx.HTTP_NOT_MODIFIED (304)
ngx.HTTP_TEMPORARY_REDIRECT (307)
ngx.HTTP_PERMANENT_REDIRECT (308)
ngx.HTTP_BAD_REQUEST (400)
ngx.HTTP_UNAUTHORIZED (401)
ngx.HTTP_PAYMENT_REQUIRED (402)
ngx.HTTP_FORBIDDEN (403)
ngx.HTTP_NOT_FOUND (404)
ngx.HTTP_NOT_ALLOWED (405)
ngx.HTTP_NOT_ACCEPTABLE (406)
ngx.HTTP_REQUEST_TIMEOUT (408)
ngx.HTTP_CONFLICT (409)
ngx.HTTP_GONE (410)
ngx.HTTP_UPGRADE_REQUIRED (426)
ngx.HTTP_TOO_MANY_REQUESTS (429)
ngx.HTTP_CLOSE (444)
ngx.HTTP_ILLEGAL (451)
ngx.HTTP_INTERNAL_SERVER_ERROR (500)
ngx.HTTP_METHOD_NOT_IMPLEMENTED (501)
ngx.HTTP_BAD_GATEWAY (502)
ngx.HTTP_SERVICE_UNAVAILABLE (503)
ngx.HTTP_GATEWAY_TIMEOUT (504)
ngx.HTTP_VERSION_NOT_SUPPORTED (505)
ngx.HTTP_INSUFFICIENT_STORAGE (507)
--``