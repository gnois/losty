-- modified from https://github.com/bungle/lua-resty-session
-- https://medium.com/lightrail/getting-token-authentication-right-in-a-stateless-single-page-application-57d0c6474e3

-- creates two cookies
-- 1. signature  (readable by js)
-- 2. payload|salt    (httponly)

var json = require('cjson.safe')
var aes = require('resty.aes')
var rnd = require('resty.random')
var str = require('losty.str')

-- AES salt length MUST BE MULTIPLE OF 8! else nginx gives intermittent error:
-- ignoring stale global SSL error (SSL: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt)
var Len = 8

var encode64 = ngx.encode_base64
var decode64 = ngx.decode_base64
var hmac = ngx.hmac_sha1


-- size, mode, hash, rounds optional
-- key optional
return \name, secret, key -> --, size, mode, hash, rounds)
	if not name
		error("session name required", 2)
	if not secret
		error("session secret required", 2)

	var encrypt = \value ->
		var salt = rnd.bytes(Len)
		var d, err = json.encode(value)
		if d
			var k = hmac(secret, salt)
			var a = aes.new(@, k, salt) --, aes.cipher(size, mode), hash, rounds)
			var sig = hmac(k, table.concat({salt, d, key}))
			var data = a.encrypt(@, d)
			return encode64(data) .. '|' .. encode64(salt), encode64(sig)
		return '', err

	var decrypt = \payload, sig ->
		if payload and sig
			var x = str.split(payload, '|')
			if x and x[1] and x[2]
				var data = decode64(x[1])
				var salt = decode64(x[2])
				if data and salt and #salt == Len
					var k = hmac(secret, salt)
					var a = aes.new(@, k, salt) --, aes.cipher(size, mode), hash, rounds)
					var d = a and a.decrypt(@, data)
					if d
						if hmac(k, table.concat({salt, d, key})) == decode64(sig)
							return json.decode(d)


	var name_ = name .. '_'

	var make = \res ->  -- js readable signature
		return res.cookie(name, false, nil, '/')
	var make_ = \res ->  -- httponly payload
		return res.cookie(name_, true, nil, '/')

	var signature
	var signing = -> return signature
	-- update signature
	var encrypting = \value ->
		var payload
		payload, signature = encrypt(value)
		return payload


	return {
		read = \req ->
			return decrypt(req.cookies[name_], req.cookies[name])

		-- age nil means last till browser close
		-- samesite nil means 'lax'
		, create = \req, res, age ->
			var secure = req.secure()
			-- order is important, encrypt then sign
			var data = make_(res)(age, nil, secure, encrypting)
			make(res)(age, nil, secure, signing)
			return data

		-- age -ve means delete
		, delete = \res ->
			make(res)(-100)
			make_(res)(-100)
	}

