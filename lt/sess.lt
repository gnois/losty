-- modified from https://github.com/bungle/lua-resty-session

-- creates two cookies
-- 1. salt                  (accessible by js)
-- 2. payload | signature   (httponly)

var json = require('cjson.safe')
var aes = require('resty.aes')
var rnd = require('resty.random')
var str = require('losty.str')

var encode64 = ngx.encode_base64
var decode64 = ngx.decode_base64
var hmac = ngx.hmac_sha1

--``
var generate_key = \req ->
	var addr = req.headers["CF-Connecting-IP"] or req.headers["Fastly-Client-IP"] or req.headers["Incap-Client-IP"] or req.headers["X-Real-IP"]
	if not addr
		addr = req.remote_addr
	return table.concat({ req.headers["User-Agent"], req.scheme, addr })
``


-- size, mode, hash, rounds optional
-- key optional
return \name, secret, key -> --, size, mode, hash, rounds)
	if not name
		error("session name required", 2)
	if not secret
		error("session secret required", 2)

	var name_s = name .. '_'
	var salt = rnd.bytes(8)
	
	var encrypt = \value ->
		-- AES salt length MUST BE MULTIPLE OF 8! else nginx gives INTERMITTENT Error 
		-- ignoring stale global SSL error (SSL: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt) 
		var k = hmac(secret, salt)
		var d = json.encode(value)
		var h = hmac(k, table.concat({salt, d, key}))
		var a = aes.new(@, k, salt) --, aes.cipher(size, mode), hash, rounds)
		return encode64(a.encrypt(@, d)) .. '|' .. encode64(h)

	var decrypt = \txt, s ->
		if txt and s
			var x = str.split(txt, '|')
			if x and x[1] and x[2]
				var d = decode64(x[1])
				var h = decode64(x[2])
				if d and h
					s = decode64(s)
					var k = hmac(secret, s)
					var a = aes.new(@, k, s) --, aes.cipher(size, mode), hash, rounds)
					d = a.decrypt(@, d)
					if d
						if hmac(k, table.concat({s, d, key})) == h
							return json.decode(d)

	var make = \res ->
		return res.cookie(name, true, nil, '/')
	
	var make_s = \res ->
		return res.cookie(name_s, false, nil, '/')

	return {
		read = \req ->
			return decrypt(req.cookies[name], req.cookies[name_s])

		-- age nil means last till browser close
		, create = \req, res, age ->
			make_s(res)(age, true, req.secure, encode64(salt))
			return make(res)(age, true, req.secure, encrypt)
		
		-- age -ve means delete
		, delete = \res ->
			make_s(res)(-100)
			make(res)(-100)
	}

