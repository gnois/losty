var json = require('cjson.safe')
var status = require('losty.status')
var accept = require('losty.accept')
var router = require('losty.router')
var dispatch = require('losty.dispatch')
var req = require('losty.req')
var res = require('losty.res')

var HTML = "text/html"
var JSON = "application/json"

-- see https://httpstatuses.com/
var must_no_body = \method, code ->
	return method == 'HEAD' or code < 200 or code == 204 or code == 205 or code == 304


-- why return function? because we want separate router if used in different nginx location block
return ->
	var rt = router()

	var route = \prefix ->
		var r = {}
		for _, method in ipairs({'get', 'post', 'put', 'delete', 'patch', 'options'}) -- 'trace', 'connect'
			r[method] = \path, f, ... ->
				if prefix and prefix ~= '/'
					path = prefix .. path
				rt.set(string.upper(method), path, f, ...)
		return r


	-- errors will only be used for HTTP status >= 400 and
	-- can be true, nil or table indexed by HTTP status number, eg: { [400] = "<html> error message markup </html>" }
	var run = \errors ->
		var q = req()
		var r = res()
		var body
		var method = q.vars.request_method
		-- so that we don't need to register HEAD path
		if method == 'HEAD'
			method = 'GET'
		var handlers, matches = rt.match(method, q.vars.uri)
		if handlers
			q.match = matches
			var ok, trace = xpcall( ->
				body = dispatch(handlers, q, r)
			, \err ->
				return debug.traceback(err, 2)
			)

			if ok
				-- ngx.status defaults to 0
				if r.status == 0
					error("Response status required", 2)
				-- status < 200 or >= 300 can have no content, so no content-type needed
				if r.status >= 200 and r.status < 300 or body
					if not must_no_body(method, r.status) and not r.headers['Content-Type']
						error("Content-Type header required", 2)
			else
				r.status = 500
				ngx.log(ngx.ERR, trace)
		else
			r.status = 404

		-- for status 400 above without body:
		-- 1. if json is requested, provide default response
		-- 2. if text/* is requested
			-- if errors is true, fall back to nginx error_page
			-- else if errors is table, use error[status] html
			-- else generate text/plain error msg
		-- https://github.com/openresty/lua-nginx-module/issues/875
		-- for error_page to work, you must not generate and send your own response via the ngx.status and ngx.say/ngx.print API
		if not body and r.status >= 400
			var pref = accept(q.headers["Accept"], {HTML, JSON})
			var ctype = tostring(pref[1])
			if method ~= 'HEAD'
				if ctype == JSON
					body = json.encode({ fail = status(r.status) })
				else
					if errors == true
						ngx.exit(r.status)
					else if errors
						body = errors[r.status]

					if not body
						ctype = "text/plain"
						body = status(r.status)
			r.headers['Content-Type'] = ctype

		r.send()
		if body and not must_no_body(method, r.status)
			if 'function' == type(body)
				for val in body()
					ngx.print(val)
					ngx.flush(true)
				-- limitation: handlers cannot cleanup (close connection etc) after generating output
			else
				ngx.print(body)
		ngx.eof()



	return {
		route = route
		, run = run
	}

