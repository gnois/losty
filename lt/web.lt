var router = require('losty.router')
var dispatch = require('losty.dispatch')
var statuses = require('losty.status')
var req = require('losty.req')
var res = require('losty.res')

var METHODS = {'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'} -- 'TRACE', 'CONNECT'

-- why return function? because we want separate router if used in different nginx location block
return ->
	var rt = router()

	var route = \prefix ->
		var r = {}
		for _, meth in ipairs(METHODS)
			r[string.lower(meth)] = \path, f, ... ->
				if prefix and prefix ~= '/'
					path = prefix .. path
				rt.set(meth, path, f, ...)
		return r


	-- show the error_page if status >= 400, error_page = true and body = nil
	-- check: true to check if status and content-type header exists
	-- returns
	--  truthy or nil/false, err
	var run = \error_page, check ->
		var handlers, body, ok, trace
		var q = req()
		var r = res()
		var method = q.vars.request_method
		handlers, q.match = rt.match(method == 'HEAD' and 'GET' or method, q.vars.uri)
		if handlers
			ok, trace = xpcall(->
				body = dispatch(handlers, q, r)
			, \err ->
				return debug.traceback(err, 2)
			)
			if not ok
				r.status = 500
				ngx.log(ngx.ERR, trace)
		else
			r.status = 404

		var code = r.status
		if error_page == true and body == nil and code >= 400
			-- https://github.com/openresty/lua-nginx-module/issues/875
			-- doc: for error_page to work, you must not generate and send your own response via the ngx.status and ngx.say/ngx.print API
			-- for 408, even error_page will not be sent
			ngx.exit(code)
			return code, trace

		if check
			if code == 0 -- ngx.status defaults to 0
				error("Response status required")

			-- status < 200 or >= 300 can have no content, so no content-type needed
			if body ~= nil or (code >= 200 and code < 300)
				if not statuses.is_empty(code) and r.headers['Content-Type'] == nil
					error("Content-Type header required")

		var err
		ok, err = r.send() -- send cookies and headers
		if ok
			if method ~= 'HEAD' and not statuses.is_empty(code) and body ~= nil
				ok, err = ngx.print(body)
			if ok
				ok, err = ngx.eof()

		if not ok
			ngx.log(ngx.ERR, err)
		-- caller to check err/trace is not nil
		return code, err or trace



	return {
		route = route
		, run = run
	}

